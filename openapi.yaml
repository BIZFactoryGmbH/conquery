openapi: 3.0.0
info:
  version: 1.0.0
  title: Conquery API
  description: Conquery API
  license:
    name: TODO
    url: http://TODO/  
components:

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

    Ingef:
      type: http
      scheme: bearer
  parameters:
    dataset:
      in: path
      name: dataset
      required: true
      schema:
        $ref: "#/components/schemas/datasetId"
    query:
      in: path
      name: query
      required: true
      schema:
        $ref: "#/components/schemas/executionId"
    concept:
      in: path
      name: concept
      required: true
      schema:
        $ref: "#/components/schemas/conceptId"
  responses:
    unauthorized:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
      description: The user is not logged in.
  schemas:
    id:
      type: string
    tableId:
      $ref: "#/components/schemas/id"
    datasetId:
      $ref: "#/components/schemas/id"
    filterId:
      $ref: "#/components/schemas/id"
    selectId:
      $ref: "#/components/schemas/id"
    conceptId:
      $ref: "#/components/schemas/id"
    connectorId:
      $ref: "#/components/schemas/id"
    secondaryIdId:
      $ref: "#/components/schemas/id"
    columnId:
      $ref: "#/components/schemas/id"
    executionId:
      $ref: "#/components/schemas/id"
    userId:
      $ref: "#/components/schemas/id"
    dateTime: #TODO
      type: string
      # format: date-time TODO not compatible: Value does not conform to the required ISO-8601 datetime format. Invalid value '2022-12-13T13:33:32.455901838Z' for type datetime at
    date: #TODO
      type: string
      format: date
    query-state:
      type: string
      enum:
        - NEW
        - RUNNING
        - FAILED
        - DONE
    fe-dataset-ids:
      type: array
      items:
        $ref: "#/components/schemas/fe-dataset-id"
    fe-dataset-id:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/datasetId"
        label:
          type: string

    feValue:
      type: object
      properties:
        value: 
          type: string
        label:
          type: string
        optionValue:
          type: string
      required:
        - "value"
    resolved-filter-result:
      type: object
      properties:
        tableId:
          $ref: "#/components/schemas/tableId"
        filterId:
          $ref: "#/components/schemas/filterId"
        value:
          type: array
          items:
            $ref: "#/components/schemas/feValue"
    resolved-concepts-result:
      type: object
      properties:
        resolvedConcepts:
          type: array
          uniqueItems: true
          items:
            type: string
        unknownCodes:
          type: array
          uniqueItems: true
          items:
            type: string
        resolvedFilter:
          $ref: "#/components/schemas/resolved-filter-result"
    mail:
      type: string
      format: mail
    column-config:
      type: object
      properties:
        name:
          description: Name of the Column-Config to be used when resolving with Upload.
          type: string
        label:
          description: Map of Localized labels.
          type: object
          items:
            type: string
        description:
          description: Map of Localized descriptions.
          type: object
          items:
            type: string
        field:
          type: string
          description: Name of column in csv
        pad:
          description: Pad-String when uploading data, to avoid problems with some tools truncating leading zeros or similar.
          type: string
        length:
          description: In conjunction with pad, the length of the padded string.
          type: integer
        resolvable:
          description: True, if the Column should be printed to output. This can be used to have resolvable but not printable fields in mapping.
          type: boolean
        print:
          description: True, if the Column should be printed to output. This can be used to have resolvable but not printable fields in mapping.
          type: boolean
        fillAnon:
          description: True, if the field will be used to fill with anonymized ids, when the user is not allowed seeing real ids.
          type: boolean

    upload-config:
      description: Describes the format of ids for EXTERNAL and entity-preview id kinds. Also describes the output format for ids in the result files.
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: "#/components/schemas/column-config"

    currency-config:
      description: Describes how the frontend shall interpret and display currency values.
      type: object
      properties:
        prefix:
          type: string
        thousandSeparator:
          type: string
        decimalSeparator:
          type: string
        decimalScale:
          type: string

    frontend-config:
      type: object
      properties:
        version:
          type: string
        manualUrl:
          type: string
          format: url
        contactEmail:
          $ref: "#/components/schemas/mail"
        currency:
          $ref: "#/components/schemas/currency-config"
        upload:
          $ref: "#/components/schemas/upload-config"
    error:
      type: object
      properties:
        message:
          type: string
        code:
          type: number
    concept-code-list:
      type: object
      properties:
        concepts:
          type: array
          items:
            type: string
        
    id-label:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/id"
        label:
          type: string
    datasetAbility:
      type: object
      properties:
        canUpload:
          type: boolean
    me:
      type: object
      properties:
        userName:
          type: string
        hideLogoutButton:
          type: boolean
        datasetAbilities:
          description: per dataset abilities of the logged in User.
          type: object
          additionalProperties:
            $ref: "#/components/schemas/datasetAbility"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/id-label"

    query-status:
      type: object
      properties:
        label:
          type: string
        isPristineLabel:
          type: boolean
        tags:
          type: array
          items:
            type: string
          uniqueItems: true
        createdAt:
          $ref: "#/components/schemas/dateTime"
        lastUsed:
          oneOf:
            - $ref: "#/components/schemas/dateTime"
            - type: 'null'
        owner:
          $ref: "#/components/schemas/userId"
        ownerName:
          type: string
        shared:
          type: boolean
        own:
          type: boolean
        system:
          type: boolean
        id:
          $ref: "#/components/schemas/executionId"
        status:
          $ref: "#/components/schemas/query-state"
        numberOfResults:
          type: integer
        requiredTime:
          oneOf:
            - type: integer
            - type: 'null'
        startTime:
          oneOf:
            - $ref: "#/components/schemas/dateTime"
            - type: 'null'
        finishTime:
          $ref: "#/components/schemas/dateTime"
        queryType:
          type: string # TODO use discriminator from Query
        secondaryId:
          oneOf:
            - $ref: "#/components/schemas/secondaryIdId"
            - type: 'null'
        resultUrls:
          type: array
          items:
            type: string #TODO url?

    labeled:
      type: object
      properties:
        name:
          type: string
        label:
          type: string

    secondaryId:
      allOf:
        - $ref: "#/components/schemas/labeled"
        - type: object
          properties:
            description:
              type: string
    column-type:
      oneOf:
        - type: string
          enum:
            - STRING
            - INTEGER
            - BOOLEAN
            - NUMERIC
            - MONEY
            - DATE
            - DATE_RANGE
        - type: string
          pattern: "LIST\\[.*\\]"

    semantic-event-date: #TODO descriptions for all
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
              - "EVENT_DATE"
    semantic-sources:
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
              - "SOURCES"
    semantic-categorical:
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
              - "CATEGORICAL"
    semantic-group:
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
              - "GROUP"
    semantic-hidden:
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
              - "HIDDEN"
    semantic-select:
      properties:
        type:
          type: string
          enum:
              - "SELECT"
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      - type: object
        properties:
          select:
            $ref: "#/components/schemas/selectId"
    semantic-concept-column:
      properties:
        type:
          type: string
          enum:
              - "CONCEPT_COLUMN"
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      - type: object
        properties:
          concept:
            $ref: "#/components/schemas/conceptId"
    semantic-column:
      properties:
          type:
            type: string
            enum:
              - "COLUMN"
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      - type: object
        properties:
          column:
            $ref: "#/components/schemas/columnId"
          
    semantic-id:
      properties:
        type:
          type: string
          enum:
              - "ID"
      allOf:
      - $ref: "#/components/schemas/semantic-base"
      - type: object
        properties:
          kind:
            type: string
    semantic-secondaryId:
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            secondaryId:
              $ref: "#/components/schemas/secondaryIdId"
    semantic-base:
      type: object
      properties:
        type:
          type: string
      required:
        - "type"
    semantics:
      discriminator:
        propertyName: "type"
        mapping:
          "CATEGORICAL": "#/components/schemas/semantic-categorical"
          "COLUMN": "#/components/schemas/semantic-column"
          "CONCEPT_COLUMN": "#/components/schemas/semantic-concept-column"
          "EVENT_DATE": "#/components/schemas/semantic-event-date"
          "GROUP": "#/components/schemas/semantic-group"
          "HIDDEN": "#/components/schemas/semantic-hidden"
          "ID": "#/components/schemas/semantic-id"
          "SELECT": "#/components/schemas/semantic-select"
          "SOURCES": "#/components/schemas/semantic-sources"
      oneOf:
        - $ref: "#/components/schemas/semantic-categorical"
        - $ref: "#/components/schemas/semantic-column"
        - $ref: "#/components/schemas/semantic-concept-column"
        - $ref: "#/components/schemas/semantic-event-date"
        - $ref: "#/components/schemas/semantic-group"
        - $ref: "#/components/schemas/semantic-hidden"
        - $ref: "#/components/schemas/semantic-id"
        - $ref: "#/components/schemas/semantic-select"
        - $ref: "#/components/schemas/semantic-sources"


    column-description:
      type: object
      properties:
        label:
          type: string
        description:
          oneOf:
            - type: 'null'
            - type: string
        defaultLabel:
          oneOf:
            - type: 'null'
            - type: string
        type:
          $ref: "#/components/schemas/column-type"
        semantics:
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/semantics"
    date-range:
      type: object
      properties:
        min:
          $ref: "#/components/schemas/date"
        max:
          $ref: "#/components/schemas/date"
    query:
      type: object
      additionalProperties: true
      #TODO but in separate file
    error-info:
      readOnly: true
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        message:
          type: string
        context:
          type: object
          additionalProperties: true

    entity-preview-config:
      readOnly: true
      type: object
      properties:
        all:
          type: array
          items:
            properties:
              name:
                type: string
              label:
                type: string
        default:
          type: array
          items:
            properties:
              name:
                type: string
              label:
                type: string
    entity-history-execution-status-info:
      type: object
      properties:
        label:
          type: string
        description:
          type: string
        typeInfo:
          type: string
        value:
          type: string
        semantics:
          type: array
          items:
            $ref: "#/components/schemas/semantics"
    entity-history-execution-status:
      allOf:
        - $ref: "#/components/schemas/full-execution-status"
        - type: object
          properties:
            infos:
              type: array
              items:
                $ref: "#/components/schemas/entity-history-execution-status-info"
    full-execution-status:
      allOf:
        - $ref: "#/components/schemas/query-status"
        - type: object
          properties:
            progress:
              oneOf:
                - type: number
                  minimum: 0
                  maximum: 1
                - type: 'null'
            columnDescriptions:
              type: array
              items:
                $ref: "#/components/schemas/column-description"
            canExpand:
              type: boolean
            query:
              $ref: "#/components/schemas/query" #TODO
            error:
              oneOf:
                - $ref: "#/components/schemas/error-info"
                - type: 'null'
            availableSecondaryIds:
              type: array
              items:
                $ref: "#/components/schemas/secondaryIdId"
servers:
  - url: http://localhost:8080/api
paths:
  /frontend/config:
    get:
      summary: An Endpoint describing configuration for the frontend.
      operationId: get-frontend-config
      responses:
        "200":
          description: The Configuration for the Frontend
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/frontend-config"
        "401":
          $ref: "#/components/responses/unauthorized"
  /datasets/{dataset}/entity-preview:
    parameters:
      - $ref: "#/components/parameters/dataset"
    get:
      operationId: get-entity-preview-config
      description: Gets entity-preview config and defaults for frontend.
      responses:
        '200':
          description: The config.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/entity-priview-config"

  /me:
    get:
      operationId: get-me
      summary: Fetches description of the currently logged in user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/me"
          description: Description of the user
        "401":
          $ref: "#/components/responses/unauthorized"
  /datasets:
    get:
      operationId: list-datasets
      description: Lists all datasets available to the User.
      responses:
        '200':
          description: The available datasets.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fe-dataset-ids"
                
                  
  /concepts/{concept}/resolve/:
    post:
      parameters:
        - in: path
          name: dataset
          required: true
          schema:
            $ref: "#/components/schemas/datasetId"
        - in: path
          name: concept
          required: true
          schema:
            $ref: "#/components/schemas/conceptId"
      operationId: resolve-concepts
      summary: Resolve values to concept-ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/concept-code-list"
      responses:
        '400':
          description: When the requested Concept does not have children.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        '200':
          description: Resolved Concepts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/resolved-concepts-result"

  /datasets/{dataset}/queries:
    parameters:
      - $ref: "#/components/parameters/dataset"
    get:
      operationId: list-queries
      summary: Get Status and metadata of Queries
      responses:
        '200':
          description: The Status and Metadata.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/query-status"
    post:
      operationId: post-query
      description: Submit a query for execution in the dataset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query"
      responses:
        '200':
          description: Status of the submitted query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"

  /queries/{query}:
    parameters:
      - in: path
        name: query
        required: true
        schema:
          $ref: "#/components/schemas/executionId"

    get:
      operationId: get-query-status
      summary: Get Status and metadata of Query
      responses:
        '200':
          description: The Status and Metadata.
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/full-execution-status"
    patch:
      description: update a query.
      operationId: patch-query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query"
      responses:
        '200':
          description: Desription of the updated execution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"
    delete:
      operationId: delete-query
      description: delete the query.
      responses:
        '200':
          description: Query was deleted.
  /queries/{query}/cancel:
    parameters:
      - in: path
        name: query
        required: true
        schema:
          $ref: "#/components/schemas/executionId"
    post:
      operationId: cancel-query
      responses:
        '200':
          description: Query was cancelled.
  /queries/{query}/reexecute:
    parameters:
      - in: path
        name: query
        required: true
        schema:
          $ref: "#/components/schemas/executionId"
    post:
      operationId: reexecute-query
      responses:
        '200':
          description: Description of restarted Query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/query"

  /datasets/{dataset}/queries/entity:
    parameters:
      - $ref: "#/components/parameters/dataset"
    post:
      operationId: get-entity-preview
      description: Fetch a history of a single entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idKind:
                  type: string
                entityId:
                  type: string
                time:
                  $ref: "#/components/schemas/date-range"
                sources:
                  type: array
                  items:
                    $ref: "#/components/schemas/connectorId"
      responses:
        '200':
          description: description of the history of the entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"





