openapi: 3.0.0
info:
  version: 0.0.0
  title: Conquery API
  description: Conquery API
  license:
    #TODO find a fitting license
    name: TODO
    url: http://TODO/
tags:
  - name: dataset
  - name: concept
  - name: query
  - name: user
  - name: entity-preview
  - name: config
  - name: frontend
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

    Bearer:
      type: http
      scheme: bearer
  parameters:
    dataset:
      in: path
      name: dataset
      required: true
      schema:
        $ref: "#/components/schemas/datasetId"
    query:
      in: path
      name: query
      required: true
      schema:
        $ref: "#/components/schemas/executionId"
    concept:
      in: path
      name: concept
      required: true
      schema:
        $ref: "#/components/schemas/conceptId"
  responses:
    unauthorized:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/error"
      description: The user is not logged in or misses permissions to access the resource.
  schemas:
    id:
      description: Typed identifier of an object. Usually consists of a recursive structure separated by dots, starting with the dataset. The dataset can be omitted, when the url is already in a context with a bound dataset.
      type: string
    tableId:
      $ref: "#/components/schemas/id"
    mappingId:
      $ref: "#/components/schemas/id"
    datasetId:
      $ref: "#/components/schemas/id"
    filterId:
      $ref: "#/components/schemas/id"
    selectId:
      $ref: "#/components/schemas/id"
    validityDateId:
      $ref: "#/components/schemas/id"
    conceptElementId:
      $ref: "#/components/schemas/id"
    conceptId:
      $ref: "#/components/schemas/conceptElementId"
    connectorId:
      $ref: "#/components/schemas/id"
    secondaryIdId:
      $ref: "#/components/schemas/id"
    templateId:
      $ref: "#/components/schemas/id"
    columnId:
      $ref: "#/components/schemas/id"
    executionId:
      $ref: "#/components/schemas/id"
    userId:
      $ref: "#/components/schemas/id"
    dateTime: #TODO
      type: string
      # format: date-time TODO not compatible: Value does not conform to the required ISO-8601 datetime format. Invalid value '2022-12-13T13:33:32.455901838Z' for type datetime at
    date: #TODO
      type: string
      format: date
    query-state:
      description: Potential states of a query.
      type: string
      enum:
        - NEW
        - RUNNING
        - FAILED
        - DONE
    frontend-dataset-id:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/datasetId"
        label:
          type: string
    resolved-concepts-result:
      description: Response object for resolve endpoint.
      type: object
      properties:
        resolvedConcepts:
          description: Ids of resolved concept elements.
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/conceptId"
        unknownCodes:
          description: Values that could not be resolved.
          type: array
          uniqueItems: true
          items:
            type: string
        resolvedFilter:
          type: object
          properties:
            tableId:
              $ref: "#/components/schemas/tableId"
            filterId:
              $ref: "#/components/schemas/filterId"
            value:
              description: List of resolved filter values.
              type: array
              items:
                type: object
                properties:
                  value:
                    description: Actual value - can be treated as the id of the value. To be used when querying the Filter.
                    type: string
                  label:
                    description: Verbose description of the value.
                    type: string
                  optionValue:
                    description: Less verbose description of the value.
                    type: string
                required:
                  - "value"
    mail:
      type: string
      format: mail
    column-config:
      type: object
      properties:
        name:
          description: Name of the Column-Config to be used when resolving with Upload.
          type: string
        label:
          description: Map of Localized labels.
          type: object
          items:
            type: string
        description:
          description: Map of Localized descriptions.
          type: object
          items:
            type: string
        field:
          type: string
          description: Name of column in result csv.
        pad:
          description: Pad-String when uploading data, to avoid problems with some tools truncating leading zeros or similar.
          type: string
        length:
          description: In conjunction with pad, the length of the padded string.
          type: integer
        resolvable:
          description: True, if the Column should be printed to output. This can be used to have resolvable but not printable fields in mapping.
          type: boolean

    upload-config:
      description: Describes the format of ids for EXTERNAL and entity-preview id kinds. Also describes the output format for ids in the result files.
      type: object
      properties:
        ids:
          type: array
          items:
            $ref: "#/components/schemas/column-config"

    currency-config:
      description: Describes how the frontend shall interpret and display currency values.
      type: object
      properties:
        prefix:
          type: string
        thousandSeparator:
          type: string
        decimalSeparator:
          type: string
          pattern: "[.,]"
        decimalScale:
          type: string

    frontend-config:
      type: object
      properties:
        version:
          description: Revision of the backend.
          type: string
        manualUrl:
          description: URL to this instances manual if available.
          type: string
          format: url
        contactEmail:
          $ref: "#/components/schemas/mail"
        currency:
          $ref: "#/components/schemas/currency-config"
        upload:
          $ref: "#/components/schemas/upload-config"
    error:
      type: object
      properties:
        message:
          type: string
        code:
          type: number
    me:
      type: object
      properties:
        userName:
          type: string
        hideLogoutButton:
          type: boolean
        datasetAbilities:
          description: Per dataset abilities of the logged in User.
          type: object
          additionalProperties:
            type: object
            properties:
              canUpload:
                type: boolean
        groups:
          description: Groups the user is part of.
          type: array
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/id"
              label:
                type: string
    query-status:
      description: Status of an executing or executed query.
      type: object
      properties:
        label:
          description: Display label of the query.
          type: string
        isPristineLabel:
          description: True if the user did not alter the queries label.
          type: boolean
        tags:
          description: Tags of the query. To be treated like directories.
          type: array
          items:
            type: string
          uniqueItems: true
        createdAt:
          $ref: "#/components/schemas/dateTime"
        lastUsed:
          $ref: "#/components/schemas/dateTime"
        owner:
          $ref: "#/components/schemas/userId"
        ownerName:
          type: string
        shared:
          description: True if the query is shared with other users.
          type: boolean
        own:
          description: True if the query is owned by the current user.
          type: boolean
        system:
          description: True if the query is system generated.
          type: boolean
        id:
          $ref: "#/components/schemas/executionId"
        status:
          $ref: "#/components/schemas/query-state"
        numberOfResults:
          description: Number of result-lines of the query.
          type: integer
        requiredTime:
          description: Duration of the last execution.
          nullable: true
          type: integer
        startTime:
          $ref: "#/components/schemas/dateTime"
        finishTime:
          $ref: "#/components/schemas/dateTime"
        queryType:
          description: Specific subtype of the query.
          type: string # TODO use discriminator from Query
        secondaryId:
          $ref: "#/components/schemas/secondaryIdId"
        resultUrls:
          description: Available result urls of the query.
          type: array
          items:
            type: string
            format: url

    labeled:
      type: object
      properties:
        name:
          type: string
        label:
          type: string

    NotCondition:
      properties:
        condition:
          $ref: "#/components/schemas/concept-condition"
        type:
          type: string
          enum: [ NOT ]
    IsPresentCondition:
      properties:
        column:
          $ref: "#/components/schemas/columnId"
        type:
          type: string
          enum: [ PRESENT ]
    PrefixRangeCondition:
      deprecated: true
      properties:
        min:
          type: string
        max:
          type: string
        type:
          type: string
          enum: [ PREFIX_RANGE ]
    OrCondition:
      properties:
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/concept-condition"
        type:
          type: string
          enum: [ OR ]
    PrefixCondition:
      deprecated: true
      properties:
        prefixes:
          type: array
          items:
            type: string
        type:
          type: string
          enum: [ PREFIX ]
    AndCondition:
      properties:
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/concept-condition"
        type:
          type: string
          enum: [ AND ]
    GroovyCondition:
      deprecated: true
      properties:
        script:
          type: string
        type:
          type: string
          enum: [ GROOVY ]
    ColumnEqualCondition:
      properties:
        column:
          $ref: "#/components/schemas/columnId"
        values:
          type: array
          items:
            type: string
            uniqueItems: true
        type:
          type: string
          enum: [ COLUMN_EQUAL ]
    EqualCondition:
      properties:
        values:
          type: array
          items:
            type: string
            uniqueItems: true
        type:
          type: string
          enum: [ EQUAL ]
    concept-condition:
      type: object
      discriminator:
        propertyName: type
        mapping:
          AND: "#/components/schemas/AndCondition"
          COLUMN_EQUAL: "#/components/schemas/ColumnEqualCondition"
          EQUAL: "#/components/schemas/EqualCondition"
          GROOVY: "#/components/schemas/GroovyCondition"
          NOT: "#/components/schemas/NotCondition"
          OR: "#/components/schemas/OrCondition"
          PREFIX: "#/components/schemas/PrefixCondition"
          PREFIX_RANGE: "#/components/schemas/PrefixRangeCondition"
          PRESENT: "#/components/schemas/IsPresentCondition"
      oneOf:
        - $ref: "#/components/schemas/AndCondition"
        - $ref: "#/components/schemas/ColumnEqualCondition"
        - $ref: "#/components/schemas/EqualCondition"
        - $ref: "#/components/schemas/GroovyCondition"
        - $ref: "#/components/schemas/NotCondition"
        - $ref: "#/components/schemas/OrCondition"
        - $ref: "#/components/schemas/PrefixCondition"
        - $ref: "#/components/schemas/PrefixRangeCondition"
        - $ref: "#/components/schemas/IsPresentCondition"
    
    ConceptTreeChild:
      allOf:
        - $ref: "#/components/schemas/labeled"
        - properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/ConceptTreeChild"
            condition:
              $ref: "#/components/schemas/concept-condition"
            description:
              type: string
            additionalInfos:
              type: array
              items:
                properties:
                  key:
                    type: string
                  value:
                    type: string
    Select:
      description: "Selects allow users to add aggregations to the output.
      Selects can only be placed in Connectors, as opposed to UniversalSelects, which can also be placed in Concepts."
      type: object
      discriminator:
        propertyName: type
        mapping:
          COUNT: "#/components/schemas/CountSelect"
          COUNT_QUARTERS: "#/components/schemas/CountQuartersSelect"
          DATE_DISTANCE: "#/components/schemas/DateDistanceSelect"
          DATE_UNION: "#/components/schemas/DateUnionSelect"
          DISTINCT: "#/components/schemas/DistinctSelect"
          DURATION_SUM: "#/components/schemas/DurationSumSelect"
          FIRST: "#/components/schemas/FirstValueSelect"
          FLAGS: "#/components/schemas/FlagSelect"
          LAST: "#/components/schemas/LastValueSelect"
          QUARTER: "#/components/schemas/QuarterSelect"
          QUARTERS_IN_YEAR: "#/components/schemas/QuartersInYearSelect"
          RANDOM: "#/components/schemas/RandomValueSelect"
          SUM: "#/components/schemas/SumSelect"
      oneOf:
        - $ref: "#/components/schemas/CountSelect"
        - $ref: "#/components/schemas/CountQuartersSelect"
        - $ref: "#/components/schemas/DateDistanceSelect"
        - $ref: "#/components/schemas/DateUnionSelect"
        - $ref: "#/components/schemas/DistinctSelect"
        - $ref: "#/components/schemas/DurationSumSelect"
        - $ref: "#/components/schemas/FirstValueSelect"
        - $ref: "#/components/schemas/FlagSelect"
        - $ref: "#/components/schemas/LastValueSelect"
        - $ref: "#/components/schemas/QuarterSelect"
        - $ref: "#/components/schemas/QuartersInYearSelect"
        - $ref: "#/components/schemas/RandomValueSelect"
        - $ref: "#/components/schemas/SumSelect"


    ExistsSelect:
      description: "Emits a boolean: True, if its holder is fulfilled, false otherwise."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            type:
              type: string
              enum: [ EXISTS ]
    ConceptColumnSelect:
      description: "Emits the values of the Concepts column. If `asIds` is true, it will instead emit the resolved ids."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            asIds:
              type: boolean
            type:
              type: string
              enum: [ CONCEPT_COLUMN ]
    EventDateUnionSelect:
      description: "Emits the aggregated values of the ValidityDates."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            type:
              type: string
              enum: [ EVENT_DATE_UNION ]
    EventDurationSumSelect:
      description: "Emits the number of days among the aggregated ValidityDates."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            type:
              type: string
              enum: [ EVENT_DURATION_SUM ]
    QuarterSelect:
      description: "Emits the sampled quarter in `2020Q1` format."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            sample:
              $ref: "#/components/schemas/temporal-sampler"
            type:
              type: string
              enum: [ QUARTER ]
    DurationSumSelect:
      description: "Emits the number of days of the aggregated date column."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ DURATION_SUM ]
    CountSelect:
      description: "Emits the number of filtered events, or number of unique entries in a selected column."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            distinct:
              type: boolean
            type:
              type: string
              enum: [ COUNT ]
        - oneOf:
            - properties:
                column:
                  $ref: "#/components/schemas/columnId"
            - properties:
                distinctByColumn:
                  type: array
                  items:
                    $ref: "#/components/schemas/columnId"
    CountQuartersSelect:
      description: "Emits the count of covered quarters encountered in the selected date column."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ COUNT_QUARTERS ]
    DateUnionSelect:
      description: "Emits the merged aggregate of the date column as date-set."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ DATE_UNION ]
    DateDistanceSelect:
      description: "Calculates the maximum distance of a date column, relative to today, or the end of the maximum of an available date restriction.
      Mostly used to calculate the age of an entity, with `timeUnit=YEARS`."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            timeUnit:
              type: string
              enum: [ YEARS, DAYS, MONTHS, WEEKS, HOURS ]
            type:
              type: string
              enum: [ DATE_DISTANCE ]
    QuartersInYearSelect:
      description: "Calculates the maximum number of quarters in a single year, over the entire observed period.
      e.g.: If an entity has events Q1-Q3 2020, and an event in Q1 2019, the result is 3."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ QUARTERS_IN_YEAR ]
    FlagSelect:
      description: "Emits the labels of all of the columns having a `true` value. The columns must be of type boolean."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            flags:
              description: "The keys are labels for the boolean columns."
              type: object
              additionalProperties:
                $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ FLAGS ]
    SumSelect:
      description: "Calculates the sum over a specified column, if `subtractColumn` is set subtracts that.
      Additionally, if `distinctByColumn` is set, only aggregates the first encountered value for unique sets of keys."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            distinct:
              type: boolean
            column:
              $ref: "#/components/schemas/columnId"
            subtractColumn:
              $ref: "#/components/schemas/columnId"
            distinctByColumn:
              type: array
              items:
                $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ SUM ]
    DistinctSelect:
      description: "Collects unique values among the specified column.
      If set, translates the values using the supplied mapping."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            mapping:
              $ref: "#/components/schemas/mappingId"
            type:
              type: string
              enum: [ DISTINCT ]
    FirstValueSelect:
      description: "Emits the first value among the specified column, by ValidityDate.
      If set, translates the values using the supplied mapping."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            mapping:
              $ref: "#/components/schemas/mappingId"
            type:
              type: string
              enum: [ FIRST ]
    LastValueSelect:
      description: "Emits the last value among the specified column, by ValidityDate.
      If set, translates the values using the supplied mapping."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            mapping:
              $ref: "#/components/schemas/mappingId"
            type:
              type: string
              enum: [ LAST ]
    RandomValueSelect:
      description: "Emits a random value among the encountered values. The distribution mirrors the distribution in the original data by values."
      allOf:
        - $ref: "#/components/schemas/SelectBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            mapping:
              $ref: "#/components/schemas/mappingId"
            type:
              type: string
              enum: [ RANDOM ]
    SelectBase:
      allOf:
        - $ref: "#/components/schemas/labeled"
        - properties:
            description:
              type: string
            default:
              type: boolean

    UniversalSelect:
      description: "Selects that can be used both on Concept and Connector level."
      type: object
      discriminator:
        propertyName: type
        mapping:
          CONCEPT_COLUMN: "#/components/schemas/ConceptColumnSelect"
          COUNT_QUARTERS: "#/components/schemas/CountQuartersSelect"
          EVENT_DATE_UNION: "#/components/schemas/EventDateUnionSelect"
          EVENT_DURATION_SUM: "#/components/schemas/EventDurationSumSelect"
          EXISTS: "#/components/schemas/ExistsSelect"
          QUARTER: "#/components/schemas/QuarterSelect"
      oneOf:
        - $ref: "#/components/schemas/ConceptColumnSelect"
        - $ref: "#/components/schemas/CountQuartersSelect"
        - $ref: "#/components/schemas/EventDateUnionSelect"
        - $ref: "#/components/schemas/EventDurationSumSelect"
        - $ref: "#/components/schemas/ExistsSelect"
        - $ref: "#/components/schemas/QuarterSelect"

    SumFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            distinct:
              type: boolean
            column:
              $ref: "#/components/schemas/columnId"
            subtractColumn:
              $ref: "#/components/schemas/columnId"
            distinctByColumn:
              type: array
              items:
                $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ SUM ]
    CountFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            distinct:
              type: boolean
            type:
              type: string
              enum: [ COUNT ]
        - oneOf:
            - properties:
                column:
                  $ref: "#/components/schemas/columnId"
            - properties:
                distinctByColumn:
                  type: array
                  items:
                    $ref: "#/components/schemas/columnId"
    FlagFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            flags:
              type: object
              additionalProperties:
                $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ FLAGS ]
    CountQuartersFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ COUNT_QUARTERS ]
    SelectFilterBase:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - $ref: "#/components/schemas/Searchable"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
        - oneOf:
            - properties:
                labels:
                  type: object
                  additionalProperties:
                    type: string
            - properties:
                template:
                  $ref: "#/components/schemas/templateId"
    SingleSelectFilter:
      allOf:
        - $ref: "#/components/schemas/SelectFilterBase"
        - properties:
            type:
              type: string
              enum: [ SINGLE_SELECT ]
    Searchable:
      properties:
        searchMinSuffixLength:
          type: integer
        generateSearchSuffixes:
          type: boolean
    BigMultiSelectFilter:
      allOf:
        - $ref: "#/components/schemas/SelectFilterBase"
        - properties:
            type:
              type: string
              enum: [ BIG_MULTI_SELECT ]
    MultiSelectFilter:
      allOf:
        - $ref: "#/components/schemas/SelectFilterBase"
        - properties:
            type:
              type: string
              enum: [ MULTI_SELECT ]
    DurationSumFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ DURATION_SUM ]
    QuartersInYearFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ QUARTERS_IN_YEAR ]
    NumberFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            type:
              type: string
              enum: [ NUMBER ]
    DateDistanceFilter:
      allOf:
        - $ref: "#/components/schemas/FilterBase"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"
            timeUnit:
              type: string
              enum: [ YEARS, MONTHS, DAYS, HOURS ]
            type:
              type: string
              enum: [ DATE_DISTANCE ]
    FilterBase:
      allOf:
        - $ref: "#/components/schemas/labeled"
        - properties:
            unit:
              type: string
            tooltip:
              type: string
            pattern:
              type: string
            allowDropFile:
              type: boolean
            defaultValue:
              type: object
    Filter:
      type: object
      discriminator:
        propertyName: type
        mapping:
          DATE_DISTANCE: "#/components/schemas/DateDistanceFilter"
          NUMBER: "#/components/schemas/NumberFilter"
          QUARTERS_IN_YEAR: "#/components/schemas/QuartersInYearFilter"
          DURATION_SUM: "#/components/schemas/DurationSumFilter"
          MULTI_SELECT: "#/components/schemas/MultiSelectFilter"
          BIG_MULTI_SELECT: "#/components/schemas/BigMultiSelectFilter"
          SINGLE_SELECT: "#/components/schemas/SingleSelectFilter"
          FLAGS: "#/components/schemas/FlagFilter"
          COUNT: "#/components/schemas/CountFilter"
          SUM: "#/components/schemas/SumFilter"
      oneOf:
        - $ref: "#/components/schemas/DateDistanceFilter"
        - $ref: "#/components/schemas/NumberFilter"
        - $ref: "#/components/schemas/QuartersInYearFilter"
        - $ref: "#/components/schemas/DurationSumFilter"
        - $ref: "#/components/schemas/MultiSelectFilter"
        - $ref: "#/components/schemas/BigMultiSelectFilter"
        - $ref: "#/components/schemas/SingleSelectFilter"
        - $ref: "#/components/schemas/FlagFilter"
        - $ref: "#/components/schemas/CountFilter"
        - $ref: "#/components/schemas/SumFilter"
    ValidityDate:
      type: object
      allOf:
        - $ref: "#/components/schemas/labeled"
        - properties:
            column:
              $ref: "#/components/schemas/columnId"

    Connector:
      description: "Describes a set of filters and selects for a single table.
      `column` provides the column to calculate the concept tree using ConceptConditions.
      `table` should be used, if the concept does not create a tree. `column` and `table` are therefore exclusive."
      type: object
      allOf:
        - $ref: "#/components/schemas/labeled"
        - oneOf:
            - properties:
                table:
                  $ref: "#/components/schemas/tableId"
            - properties:
                column:
                  $ref: "#/components/schemas/columnId"
        - properties:
            condition:
              description: "Allows filtering of events for the tree. Useful to separate out events from a larger table for a very niche concept."
              $ref: "#/components/schemas/concept-condition"
            filters:
              description: "Definition of filters available in for querying this connector."
              type: array
              items:
                $ref: "#/components/schemas/Filter"
            validityDates:
              description: "Definitions of relevant date columns for this connector.
              e.g.: The publishing date of a movie, and its production period."
              type: array
              items:
                $ref: "#/components/schemas/ValidityDate"
            selects:
              description: "Definition of selects available for querying this connector."
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/Select"
                  - $ref: "#/components/schemas/UniversalSelect"
            default:
              type: boolean

    Concept:
      allOf:
        - $ref: "#/components/schemas/labeled"
        - properties:
            tables:
              type: array
              items:
                $ref: "#/components/schemas/Connector"
            children:
              type: array
              items:
                $ref: "#/components/schemas/ConceptTreeChild"
            selects:
              type: array
              items:
                $ref: "#/components/schemas/UniversalSelect"
            hidden:
              type: boolean
            description:
              type: string
            additionalInfos:
              type: array
              items:
                properties:
                  key:
                    type: string
                  value:
                    type: string

    ColumnType:
      description: Available types for input and output of conquery. Additionally list, which is a nested type of ColumnType.
      oneOf:
        - type: string
          enum:
            - STRING
            - INTEGER
            - BOOLEAN
            - NUMERIC
            - MONEY
            - DATE
            - DATE_RANGE
        - type: string
          pattern: "LIST\\[.*\\]"
    semantic-event-date:
      description: Values contain the primary date of a row.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
            - "EVENT_DATE"
    semantic-sources:
      description: Values in the column contain references to the source connector.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
            - "SOURCES"
    semantic-categorical:
      description: Values are an enumeration.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
            - "CATEGORICAL"
    semantic-group:
      description: One of the columns to group by in entity-preview.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
            - "GROUP"
    semantic-hidden:
      description: Values should not be displayed in entity-preview.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
      properties:
        type:
          type: string
          enum:
            - "HIDDEN"
    semantic-select:
      description: Values are of the referenced select.
      properties:
        type:
          type: string
          enum:
            - "SELECT"
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            select:
              $ref: "#/components/schemas/selectId"
    semantic-concept-column:
      description: Values contain the ids of the concept-element resolved to the event.
      properties:
        type:
          type: string
          enum:
            - "CONCEPT_COLUMN"
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            concept:
              $ref: "#/components/schemas/conceptId"
    semantic-column:
      description: Values are of a specific column, without any aggregation.
      properties:
        type:
          type: string
          enum:
            - "COLUMN"
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            column:
              $ref: "#/components/schemas/columnId"
    semantic-id:
      description: Values are an entity's id.
      properties:
        type:
          type: string
          enum:
            - "ID"
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            kind:
              type: string
    semantic-secondaryId:
      description: Values are a secondaryId.
      allOf:
        - $ref: "#/components/schemas/semantic-base"
        - type: object
          properties:
            secondaryId:
              $ref: "#/components/schemas/secondaryIdId"

    semantic-base:
      type: object
      properties:
        type:
          type: string
      required:
        - "type"
    semantics:
      description: Used to add additional information to a queries resulting column, such as sources or restrictions of the values.
      discriminator:
        propertyName: "type"
        mapping:
          "CATEGORICAL": "#/components/schemas/semantic-categorical"
          "COLUMN": "#/components/schemas/semantic-column"
          "CONCEPT_COLUMN": "#/components/schemas/semantic-concept-column"
          "EVENT_DATE": "#/components/schemas/semantic-event-date"
          "GROUP": "#/components/schemas/semantic-group"
          "HIDDEN": "#/components/schemas/semantic-hidden"
          "ID": "#/components/schemas/semantic-id"
          "SECONDARY_ID": "#/components/schemas/semantic-secondaryId"
          "SELECT": "#/components/schemas/semantic-select"
          "SOURCES": "#/components/schemas/semantic-sources"
      oneOf:
        - $ref: "#/components/schemas/semantic-categorical"
        - $ref: "#/components/schemas/semantic-column"
        - $ref: "#/components/schemas/semantic-concept-column"
        - $ref: "#/components/schemas/semantic-event-date"
        - $ref: "#/components/schemas/semantic-group"
        - $ref: "#/components/schemas/semantic-hidden"
        - $ref: "#/components/schemas/semantic-id"
        - $ref: "#/components/schemas/semantic-secondaryId"
        - $ref: "#/components/schemas/semantic-select"
        - $ref: "#/components/schemas/semantic-sources"

    filter-value-base:
      type: object
      properties:
        filter:
          $ref: "#/components/schemas/filterId"

    filter-value-multi-select:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "MULTI_SELECT"
        value:
          type: array
          items:
            type: string
    filter-value-big-multi-select:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "BIG_MULTI_SELECT"
        value:
          type: array
          items:
            type: string
    filter-value-single-select:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "SELECT"
        value:
          type: string
    filter-value-string:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "STRING"
        value:
          type: string

    filter-value-integer:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "INTEGER"
        value:
          type: integer
    filter-value-number-range:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "INTEGER_RANGE"
            - "DECIMAL_RANGE"
            - "MONEY_RANGE"
            - "REAL_RANGE"
        value:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
    filter-value-integer-range:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      properties:
        type:
          type: string
          enum:
            - "INTEGER_RANGE"
        value:
          type: object
          properties:
            min:
              type: integer
            max:
              type: integer

    group-filter-value:
      allOf:
        - $ref: "#/components/schemas/filter-value-base"
      type: object
      additionalProperties:
        $ref: "#/components/schemas/filter-value"

    filter-value:
      description: Bundle of Filter and requested parameters.
      type: object
      discriminator:
        propertyName: "type"
        mapping:
          "INTEGER_RANGE": "#/components/schemas/filter-value-integer-range"
          "REAL_RANGE": "#/components/schemas/filter-value-number-range"
          "MONEY_RANGE": "#/components/schemas/filter-value-number-range"
          "DECIMAL_RANGE": "#/components/schemas/filter-value-number-range"
          "INTEGER": "#/components/schemas/filter-value-integer"
          "STRING": "#/components/schemas/filter-value-string"
          "SELECT": "#/components/schemas/filter-value-single-select"
          "BIG_MULTI_SELECT": "#/components/schemas/filter-value-multi-select"
          "MULTI_SELECT": "#/components/schemas/filter-value-big-multi-select"
      oneOf:
        - $ref: "#/components/schemas/filter-value-number-range"
        - $ref: "#/components/schemas/filter-value-number-range"
        - $ref: "#/components/schemas/filter-value-number-range"
        - $ref: "#/components/schemas/filter-value-number-range"
        - $ref: "#/components/schemas/filter-value-integer"
        - $ref: "#/components/schemas/filter-value-string"
        - $ref: "#/components/schemas/filter-value-single-select"
        - $ref: "#/components/schemas/filter-value-multi-select"
        - $ref: "#/components/schemas/filter-value-big-multi-select"
    column-description:
      description: Metadata of a result column of a query.
      type: object
      properties:
        label:
          description: label of the column in csv.
          type: string
        description:
          description: If available any description of the data of the query. For example SecondaryId or an exported Column.
          nullable: true
          type: string
        defaultLabel:
          nullable: true
          type: string
        type:
          $ref: "#/components/schemas/ColumnType"
        semantics:
          description: Additional information and tags of the query.
          type: array
          uniqueItems: true
          items:
            $ref: "#/components/schemas/semantics"
    date-range:
      type: object
      properties:
        min:
          $ref: "#/components/schemas/date"
        max:
          $ref: "#/components/schemas/date"
    cq-element-base:
      type: object
      properties:
        label:
          type: string
    cq-date-restriction:
      description: "Restricts the events, downstream components receive to the specified absolute period. This node is fulfilled, if the downstream child is fulfilled."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            dateRange:
              $ref: "#/components/schemas/date-range"
            child:
              $ref: "#/components/schemas/cq-element"
            type:
              type: string
              enum:
                - DATE_RESTRICTION
    cq-negation:
      description: "Negates the result of its downstream child: If downstream is fulfilled, this node is not fulfilled and vice versa.
      By default, this node will block date-aggregation of downstream elements, as the results are mostly bogus.
      In LOGICAL dateAggregation mode, it will deduct the observed period from infinity."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            child:
              $ref: "#/components/schemas/cq-element"
            type:
              type: string
              enum:
                - NEGATION
    cq-or:
      description: "Logically ors its downstream children: If any downstream element is fulfilled, this node is fulfilled."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/cq-element"
            createExists:
              description: "Allows the creation of a virtual select that reflects if this node is fulfilled or not. Useful for the creation of more complex concepts."
              type: boolean
            type:
              type: string
              enum:
                - OR

    cq-and:
      description: "Logically ands its downstream children: If all downstream element are fulfilled, this node is fulfilled."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            children:
              type: array
              items:
                $ref: "#/components/schemas/cq-element"
            createExists:
              description: "Allows the creation of a virtual select that reflects if this node is fulfilled or not. Useful for the creation of more complex concepts."
              type: boolean
            type:
              type: string
              enum:
                - AND

    cq-reused-query:
      description: "Allows the reuse of an existing query, by referencing execution of that query by its id."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            queryId:
              $ref: "#/components/schemas/executionId"
            excludeFromSecondaryId:
              description: "If the query is reused within a SECONDARY_ID query, it will not be executed with the secondary-id set."
              type: boolean
            type:
              type: string
              enum:
                - SAVED_QUERY
    cq-result-info-decorator:
      #TODO del?
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            values:
              type: object
              additionalProperties:
                type: string
            child:
              $ref: "#/components/schemas/cq-element"
            type:
              type: string
              enum:
                - RESULT_INFO_DECORATOR
    cq-concept:
      description: "The fundamental query-element. Contains definitions for filtering and aggregation based on concept defined filters and selects.
      `ids` contains a list of concept element ids of the same concept, which should be filtered for.
      `tables` contains one or more description of filters and selects from a specific connector.
      Filters can be grouped into event-filters and aggregation-filters, where event filters, filter rows, while aggregation-filters aggregate those filtered rows.
      Selects calculate aggregations on the filtered rows.
      
      The filters are logically and-ed, meaning this node is only fulfilled if all its filters are fulfilled."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            ids:
              $ref: "#/components/schemas/conceptElementId"
            tables:
              type: object
              properties:
                id:
                  $ref: "#/components/schemas/connectorId"
                dateColumn:
                  description: "Allows the selection of one of pre-defined date for date-restrictions."
                  type: object
                  properties:
                    value:
                      $ref: "#/components/schemas/validityDateId"
                filters:
                  type: array
                  items:
                    $ref: "#/components/schemas/filter-value"
                selects:
                  type: array
                  items:
                    $ref: "#/components/schemas/selectId"
            excludeFromSecondaryId:
              description: If true, this node is not grouped by a secondaryId even if the referenced tables contain the secondaryId.
              type: boolean
            excludeFromTimeAggregation:
              description: If true, do not aggregate time for this node.
              type: boolean
            type:
              type: string
              enum:
                - CONCEPT
    temporal-sampler:
      description: "Describes how a date-set should be sampled to reduce it to a single day.
      - EARLIEST is the first day of the sets span
      - LATEST is the last day of the sets span
      - RANDOM samples is a single random day within the set."
      type: string
      enum:
        - EARLIEST
        - LATEST
        - RANDOM
    cq-sampled:
      type: object
      properties:
        child:
          $ref: "#/components/schemas/cq-element"
        sampler:
          $ref: "#/components/schemas/temporal-sampler"
    cq-days-before:
      description: "Used within CONCEPT_QUERY to describe relative temporal relationships between complex events.
      The result of `preceding` has to be within the `days` specified time range before the sampled of `index`."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            days:
              type: object
              properties:
                min:
                  type: integer
                max:
                  type: integer
            index:
              $ref: "#/components/schemas/cq-sampled"
            preceding:
              $ref: "#/components/schemas/cq-sampled"
            type:
              type: string
              enum:
                - DAYS_BEFORE
    cq-before-or-same:
      description: "Used within CONCEPT_QUERY to describe relative temporal relationships between complex events.
            The result of `preceding` has be at or before `index`' sampled day."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            index:
              $ref: "#/components/schemas/cq-sampled"
            preceding:
              $ref: "#/components/schemas/cq-sampled"
            type:
              type: string
              enum:
                - BEFORE_OR_SAME
    cq-days-before-or-never:
      description: "Used within CONCEPT_QUERY to describe relative temporal relationships between complex events.
      The result of `preceding` has be at least `days` before `index`' sampled day."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            days:
              type: integer
            index:
              $ref: "#/components/schemas/cq-sampled"
            preceding:
              $ref: "#/components/schemas/cq-sampled"
            type:
              type: string
              enum:
                - BEFORE_OR_NEVER
    cq-same:
      description: "Used within CONCEPT_QUERY to describe relative temporal relationships between complex events.
      The result of `preceding` has be the same as `index`' sampled day."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            index:
              $ref: "#/components/schemas/cq-sampled"
            preceding:
              $ref: "#/components/schemas/cq-sampled"
            type:
              type: string
              enum:
                - SAME
    cq-before:
      description: "Used within CONCEPT_QUERY to describe relative temporal relationships between complex events.
            The result of `preceding` has to be before `index`' sampled day."
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            index:
              $ref: "#/components/schemas/cq-sampled"
            preceding:
              $ref: "#/components/schemas/cq-sampled"
            type:
              type: string
              enum:
                - BEFORE
    cq-external:
      description: "Allows uploading of external files. Primarily as a list of included entities, with additional options to specify durations or auxiliary virtual selects.
      The data is uploaded as array of rows as rows of strings. The rows are required to have the same length. The first row is always skipped. As header.
      Produces an error, when no entities can be resolved. "
      type: object
      allOf:
        - $ref: "#/components/schemas/cq-element-base"
        - properties:
            format:
              type: array
              items:
                anyOf:
                  - type: string
                    description: "Name of an ID-kind, described in `GET /frontend/config#upload`, will be used to resolve the entity to an already imported/existent entity"
                  - type: string
                    description: "When EXTRA supplies auxiliary data to be emitted as a column named after the columns header.
                      Otherwise describes schemes to do date aggregation on one or multiple columns:
                      - EVENT_DATE selects a single column as the source of the selected date
                      - START_DATE selects a column as the start of a date-range 
                      - END_DATE selects a column as the end of a date-range
                      - DATE_RANGE selects a column as a full date-range
                      - DATE_SET selects a column as containing a date-set
                      - ALL placeholder, to aggregate infinite/all dateset
                      
                      Combining multiple of the date aggregations is possible but except for START_DATE/END_DATE will create bogus results. 
                      "
                    enum:
                      - EXTRA
                      - EVENT_DATE
                      - START_DATE
                      - END_DATE
                      - DATE_RANGE
                      - DATE_SET
                      - ALL
            values:
              type: array
              items:
                type: array
                items:
                  type: string
            onlySingles:
              description: "If true, throw an error when an entity is resolved multiple times. Additionally, the result of EXTRA columns will be STRING instead of LIST[STRING]"
              type: boolean
            type:
              type: string
              enum:
                - EXTERNAL

    cq-element:
      type: object
      discriminator:
        propertyName: type
        mapping:
          AND: "#/components/schemas/cq-and"
          BEFORE: "#/components/schemas/cq-before"
          BEFORE_OR_NEVER: "#/components/schemas/cq-days-before-or-never"
          BEFORE_OR_SAME: "#/components/schemas/cq-before-or-same"
          CONCEPT: "#/components/schemas/cq-concept"
          DATE_RESTRICTION: "#/components/schemas/cq-date-restriction"
          DAYS_BEFORE: "#/components/schemas/cq-days-before"
          EXTERNAL: "#/components/schemas/cq-external"
          NEGATION: "#/components/schemas/cq-negation"
          OR: "#/components/schemas/cq-or"
          RESULT_INFO_DECORATOR: "#/components/schemas/cq-result-info-decorator"
          SAME: "#/components/schemas/cq-same"
          SAVED_QUERY: "#/components/schemas/cq-reused-query"
      oneOf:
        - $ref: "#/components/schemas/cq-and"
        - $ref: "#/components/schemas/cq-before"
        - $ref: "#/components/schemas/cq-days-before-or-never"
        - $ref: "#/components/schemas/cq-before-or-same"
        - $ref: "#/components/schemas/cq-concept"
        - $ref: "#/components/schemas/cq-date-restriction"
        - $ref: "#/components/schemas/cq-days-before"
        - $ref: "#/components/schemas/cq-external"
        - $ref: "#/components/schemas/cq-negation"
        - $ref: "#/components/schemas/cq-or"
        - $ref: "#/components/schemas/cq-result-info-decorator"
        - $ref: "#/components/schemas/cq-same"
        - $ref: "#/components/schemas/cq-reused-query"

    date-aggregation-mode:
      description: "Can be used in some queries to alter the way dates are aggregated. Specifically for AND/OR/NEGATION nodes.
      - NONE will disable date-aggregation, meaning no EVENT_DATES column will be created,
      - MERGE will union all downstream dates,
      - INTERSECT will intersect the downstream dates,
      - LOGICAL depends on the respective nodes: AND will intersect, OR will merge, NEGATION will subtract the dates from ALL-time."
      type: string
      enum:
        - NONE
        - MERGE
        - INTERSECT
        - LOGICAL
    table-export-query:
      description: "For all entities fulfilling the sub-query, export raw data of selected tables over the selected period.
      The output format is in wide format, meaning all tables are concatenated, but only single rows are emitted with only the columns of the source table filled.
      Columns of the same SecondaryId will be grouped and marked with SECONDARY_ID semantics. The source column will contain the id of the source table.
      The CONCEPT nodes can be used for filtering single rows."
      type: object
      properties:
        query:
          $ref: "#/components/schemas/query"
        dateRange:
          $ref: "#/components/schemas/date-range"
        tables:
          type: array
          items:
            $ref: "#/components/schemas/cq-concept"
        rawConceptValues:
          description: "If true, columns of concepts will be emitted as raw values. Else they will be emitted as resolved ids of the concept-elements."
          type: boolean
        type:
          type: string
          enum:
            - TABLE_EXPORT
    secondaryId-query:
      description: "Executes concept-queries grouped by a secondary key - in addition to entities. Therefore, multiple columns are emitted per entity.
      The secondary-ids are put into a column named after its label, tagged with SECONDARY_ID semantics."
      type: object
      properties:
        root:
          $ref: "#/components/schemas/cq-element"
        secondaryId:
          $ref: "#/components/schemas/secondaryIdId"
        dateAggregationMode:
          $ref: "#/components/schemas/date-aggregation-mode"
        type:
          type: string
          enum:
            - SECONDARY_ID_QUERY
    resolution-and-alignment:
      description: "Grouping of algorithms used for subdividing and aligning of export-forms."
      type: object
      properties:
        resolution:
          description: "Determines the unit to sub-divide by, starting at the start of the input date range.
          - COMPLETE is identity,
          - YEARS creates subdivisions for all covered years,
          - QUARTERS creates subdivisions for all covered quarters,
          - DAYS creates subdivisions per covered day."
          type: string
          enum:
            - COMPLETE
            - DAYS
            - QUARTERS
            - YEARS
        alignment:
          description: "Aligns the date-ranges that are subdivided. This helps with more uniform output formats.
          - NO_ALIGN will not alter the date-ranges,
          - DAY aligns to days, effectively the same as NO_ALIGN,
          - QUARTER will align to the start/end of the next quarter,
          - YEAR will align to the start/end of the next year"
          type: string
          enum:
            - NO_ALIGN
            - DAY
            - QUARTER
            - YEAR
    array-concept-query:
      description: "Building block of export-forms: evaluates all queries independently, exporting their selects." #TODO tbh kP was genau die macht
      type: object
      properties:
        childQueries:
          type: array
          items:
            $ref: "#/components/schemas/concept-query"
        dateAggregationMode:
          $ref: "#/components/schemas/date-aggregation-mode"
        type:
          type: string
          enum:
            - ARRAY_CONCEPT_QUERY
    relative-form-query:
      description: "Export a set of features for all included entities. 
      The periods to export are determined relative to the resulting event-dates per entity by sampling a single day. 
      The parameters timeCountBefore/-After determine how many consecutive periods are exported for the feature (before) and outcome (after) range.
      The index date either belongs to the feature range (indexPlacement BEFORE), the outcome range (AFTER) or lies in between (NEUTRAL)
      In the feature range, the period closest to the index date has the index=-1. Earlier periods have a decremented index in respect to their sequence.
      Accordingly, the period closest to the index date in the outcome range starts at index=1. Subsequent periods have an incremented index."
      type: object
      properties:
        query:
          $ref: "#/components/schemas/query"
        features:
          $ref: "#/components/schemas/array-concept-query"
        indexSelector:
          $ref: "#/components/schemas/temporal-sampler"
        indexPlacement:
          type: string
          enum:
            - BEFORE
            - NEUTRAL
            - AFTER
        timeCountBefore:
          type: integer
        timeCountAfter:
          type: integer
        timeUnit:
          #TODO was macht timeUnit, was nicht schon resolutionAndAlignmentMap macht?
          type: string
          enum:
            - DAYS
            - QUARTERS
            - YEARS
        resolutionsAndAlignmentMap:
          type: array
          items:
            $ref: "#/components/schemas/resolution-and-alignment"
        type:
          type: string
          enum:
            - RELATIVE_FORM_QUERY
    entity-date-query:
      description: "Export a set of features for all entities satisfying the query, over the query's result date. 
      See absolute-form-query for comparison."
      type: object
      properties:
        query:
          $ref: "#/components/schemas/query"
        features:
          $ref: "#/components/schemas/array-concept-query"
        resolutionsAndAlignments:
          type: array
          items:
            $ref: "#/components/schemas/resolution-and-alignment"
        dateRange:
          $ref: "#/components/schemas/date-range"
        dateAggregationMode:
          $ref: "#/components/schemas/date-aggregation-mode"
        type:
          type: string
          enum:
            - ENTITY_DATE_QUERY
    absolute-form-query:
      description: "Export a set of features over a specified period for all entities the query is fulfilled. 
                    Using resolutionsAndAlignmentMap the period can be subdivided into Years, Quarters and Months.
                    The subdivisions can then be aligned to the years, months and quarters.
                    Each subdivision is assigned an increasing index per resolution: The first quarter is index=1, the second quarter index=2, while the first year is index=1 and so on."
      type: object
      properties:
        query:
          $ref: "#/components/schemas/query"
        features:
          $ref: "#/components/schemas/array-concept-query"
        resolutionsAndAlignmentMap:
          type: array
          items:
            $ref: "#/components/schemas/resolution-and-alignment"
        dateRange:
          $ref: "#/components/schemas/date-range"
        type:
          type: string
          enum:
            - ABSOLUTE_FORM_QUERY
    concept-query:
      description: "The fundamental query of Conquery. Executes a query, where all fulfilling entities are included as a single line, 
      containing the aggregated validity-dates, as well as any requested selects. The first columns are unique ids of the entity, then the event-dates column, and then in unspecified order all select results.
      A CONCEPT_QUERY represents a tree of logically composed query elements, where the leafs are CONCEPT nodes, describing filtering and aggregation."
      type: object
      properties:
        root:
          $ref: "#/components/schemas/cq-element"
        dateAggregationMode:
          $ref: "#/components/schemas/date-aggregation-mode"
        type:
          type: string
          enum:
            - CONCEPT_QUERY

    query:
      type: object
      discriminator:
        propertyName: type
        mapping:
          CONCEPT_QUERY: "#/components/schemas/concept-query"
          ABSOLUTE_FORM_QUERY: "#/components/schemas/absolute-form-query"
          ENTITY_DATE_QUERY: "#/components/schemas/entity-date-query"
          RELATIVE_FORM_QUERY: "#/components/schemas/relative-form-query"
          ARRAY_CONCEPT_QUERY: "#/components/schemas/array-concept-query"
          SECONDARY_ID_QUERY: "#/components/schemas/secondary-id-query"
          TABLE_EXPORT: "#/components/schemas/table-export-query"
      oneOf:
        - $ref: "#/components/schemas/concept-query"
        - $ref: "#/components/schemas/absolute-form-query"
        - $ref: "#/components/schemas/entity-date-query"
        - $ref: "#/components/schemas/relative-form-query"
        - $ref: "#/components/schemas/array-concept-query"
        - $ref: "#/components/schemas/secondaryId-query"
        - $ref: "#/components/schemas/table-export-query"

    error-info:
      description: Basic format of an error.
      type: object
      properties:
        id:
          type: string
          format: uuid
        code:
          type: string
        message:
          type: string
        context:
          type: object
          additionalProperties: true

    entity-preview-config:
      description: Frontend configuration for the entity-preview.
      type: object
      properties:
        all:
          description: For frontend, list of sources to show the user. Usually a list of sources that have been tidied up.
          type: array
          items:
            properties:
              name:
                type: string
              label:
                type: string
        default:
          description: For frontend, list of sources to select by default.
          type: array
          items:
            properties:
              name:
                type: string
              label:
                type: string
    entity-history-execution-status:
      description: Specific execution info for a entity-preview, containing additional information for the entity.
      allOf:
        - $ref: "#/components/schemas/full-execution-status"
        - type: object
          properties:
            infos:
              description: Auxiliary information to the entity.
              type: array
              items:
                type: object
                properties:
                  label:
                    type: string
                  description:
                    type: string
                  typeInfo:
                    type: string
                  value:
                    type: string
                  semantics:
                    type: array
                    items:
                      $ref: "#/components/schemas/semantics"
    full-execution-status:
      allOf:
        - $ref: "#/components/schemas/query-status"
        - type: object
          properties:
            progress:
              description: Progress of the query.
              nullable: true
              type: number
              minimum: 0
              maximum: 1
            columnDescriptions:
              description: Metadata of the queries result by column.
              type: array
              items:
                $ref: "#/components/schemas/column-description"
            canExpand:
              description: Flag for the frontend, if the query can be rendered by it and therefore should allow expansion.
              type: boolean
            query:
              $ref: "#/components/schemas/query"
            error:
              $ref: "#/components/schemas/error-info"
            availableSecondaryIds:
              description: List of all secondaryIds available inside this query, this is used by the frontend to display them to users when reusing queries.
              type: array
              items:
                $ref: "#/components/schemas/secondaryIdId"
servers:
  - url: http://localhost:8080/api
paths:
  /frontend/config:
    get:
      summary: An Endpoint describing the configuration for the frontend.
      tags:
        - frontend
      operationId: get-frontend-config
      responses:
        "200":
          description: The Configuration for the Frontend
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/frontend-config"
        "401":
          $ref: "#/components/responses/unauthorized"
  /datasets/{dataset}/entity-preview:
    parameters:
      - $ref: "#/components/parameters/dataset"
    get:
      tags:
        - frontend
        - entity-preview
      operationId: get-entity-preview-config
      summary: Retrieve config and defaults for entity-preview for the frontend.
      responses:
        "200":
          description: The config.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/entity-preview-config"
        "401":
          $ref: "#/components/responses/unauthorized"

  /me:
    get:
      tags:
        - frontend
        - user
      operationId: get-me
      summary: Fetches description of the currently logged in user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/me"
          description: Description of the user
        "401":
          $ref: "#/components/responses/unauthorized"
  /datasets:
    get:
      tags:
        - frontend
      operationId: list-datasets
      summary: Fetch all datasets available to the User.
      responses:
        "200":
          description: The available datasets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/frontend-dataset-id"
  /concepts/{concept}/resolve:
    post:
      tags:
        - concept
      parameters:
        - $ref: "#/components/parameters/concept"
      operationId: resolve-concepts
      summary: Resolve values to concept-ids
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                concepts:
                  type: array
                  items:
                    type: string
      responses:
        '400':
          description: When the requested Concept does not have children.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"
        "200":
          description: Resolved Concepts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/resolved-concepts-result"
        "401":
          $ref: "#/components/responses/unauthorized"

  /datasets/{dataset}/queries:
    parameters:
      - $ref: "#/components/parameters/dataset"
    get:
      tags:
        - query
        - dataset
      operationId: list-queries
      summary: Fetch Status and metadata of all queries visible to the user.
      responses:
        "200":
          description: The Status and Metadata.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/query-status"
        "401":
          $ref: "#/components/responses/unauthorized"
    post:
      tags:
        - query
        - dataset
      operationId: post-query
      summary: Submit a query for execution in the dataset.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query"
      responses:
        "200":
          description: Status of the submitted query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"
        "401":
          $ref: "#/components/responses/unauthorized"

  /queries/{query}:
    parameters:
      - $ref: "#/components/parameters/query"
    get:
      tags:
        - query
      operationId: get-query-status
      summary: Get Status and metadata of Query
      responses:
        "200":
          description: The Status and Metadata.
          content:
            application/json;charset=utf-8:
              schema:
                $ref: "#/components/schemas/full-execution-status"
        "401":
          $ref: "#/components/responses/unauthorized"
    patch:
      tags:
        - query
      summary: Update a query.
      operationId: patch-query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/query"
      responses:
        "200":
          description: Description of the updated execution
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"
        "401":
          $ref: "#/components/responses/unauthorized"
    delete:
      summary: Delete the query.
      tags:
        - query
      operationId: delete-query
      responses:
        "200":
          description: Query was deleted.
        "401":
          $ref: "#/components/responses/unauthorized"
  /queries/{query}/cancel:
    parameters:
      - $ref: "#/components/parameters/query"
    post:
      summary: Cancel a running query.
      tags:
        - query
      operationId: cancel-query
      responses:
        "200":
          description: Query was cancelled.
        "401":
          $ref: "#/components/responses/unauthorized"
  /queries/{query}/reexecute:
    parameters:
      - $ref: "#/components/parameters/query"
    post:
      summary: Restart a query. Useful for when it is empty after a restart, or the underlying data has changed.
      tags:
        - query
      operationId: reexecute-query
      responses:
        "200":
          description: Description of restarted Query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/full-execution-status"
        "401":
          $ref: "#/components/responses/unauthorized"
  /datasets/{dataset}/queries/resolve-entities:
    parameters:
      - $ref: "#/components/parameters/dataset"
    post:
      tags:
        - entity-preview
      operationId: resolve-entities
      summary: Search for a few entities, returning their ids.
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/filter-value"
      responses:
        "200":
          description: List of tuple of ids.
          content:
            application/json:
              example: [ { "kind1": "id1", "kind2": "id2" }, { "kind1": "id3", "kind2": "id4" } ]
              schema:
                type: object
                additionalProperties:
                  type: string


  /datasets/{dataset}/queries/entity:
    parameters:
      - $ref: "#/components/parameters/dataset"
    post:
      tags:
        - entity-preview
      operationId: get-entity-preview
      summary: Submit a query for the history of a single entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                idKind:
                  description: The kind of the entity id. Options are made available through `column-config#name`
                  type: string
                entityId:
                  description: The id of the entity.
                  type: string
                time:
                  $ref: "#/components/schemas/date-range"
                sources:
                  description: List of connectorIds to export their backing tables.
                  type: array
                  items:
                    $ref: "#/components/schemas/connectorId"
      responses:
        "200":
          description: Description of the history of the entity.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/entity-history-execution-status"
        "401":
          $ref: "#/components/responses/unauthorized"
